Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: mm2(double *__restrict__, double *__restrict__, double *__restrict__, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mm2(double *__restrict__, double *__restrict__, double *__restrict__, u64)) [1] mm2.c(5,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mm2.c(6,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm2.c(7,5)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mm2.c(11,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mm2.c(11,2)
         remark #15300: LOOP WAS VECTORIZED
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      LOOP END

      LOOP BEGIN at mm2.c(11,2)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END

      LOOP BEGIN at mm2.c(11,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mm2.c(7,5)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mm2.c(11,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mm2.c(11,2)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mm2.c(11,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mm2.c(5,1):remark #34051: REGISTER ALLOCATION : [mm2] mm2.c:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     121
            Global    :      62
            Local     :      59
        Regenerable   :       2
        Spilled       :      27
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     208 bytes*
            Reads     :      28 [2.56e+02 ~ 2.5%]
            Writes    :      26 [3.88e+01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
