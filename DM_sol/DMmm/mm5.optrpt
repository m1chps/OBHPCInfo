Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: mm5(double *__restrict__, double *__restrict__, double *__restrict__, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mm5(double *__restrict__, double *__restrict__, double *__restrict__, u64)) [1] mm5.c(5,1)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at mm5.c(6,1)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mm5.c(7,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm5.c(8,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mm5.c(15,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mm5.c(15,2)
         remark #25264: Loop rerolled by 8 
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mm5.c(15,2)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mm5.c(27,2)
         remark #15307: loop was not vectorized: top test could not be found
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mm5.c(5,1):remark #34051: REGISTER ALLOCATION : [mm5] mm5.c:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     157
            Global    :      43
            Local     :     114
        Regenerable   :      48
        Spilled       :      14
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       9 [2.50e+01 ~ 0.5%]
        Spills        :     152 bytes*
            Reads     :      26 [1.66e+02 ~ 3.3%]
            Writes    :      24 [6.29e+01 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
